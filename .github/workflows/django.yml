name: Tests 

on:
  push:
    branches: [ main ]
    paths-ignore:
      - 'README.md'

jobs:
  run-tests:
    runs-on: ubuntu-latest
    # runner automatically cretes docker network to manage life cycle of the service container
    services:
      # service id
      postgres:
        # container image
        image: postgres
        # map of env var in service container
        env:
          POSTGRES_PASSWORD: '1234'
          POSTGRES_USER: mario
          POSTGRES_DB: feynmanit-db
        # ports to expose on the service container, since this job does not rely on a docker container, we have to expose otherwise there would be no need to expose
        ports:
          # port 5432 on docker host (runner machine) to 5432 on postgres service container
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 
      uses: actions/setup-python@v2
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Run Tests
      run: |
        echo $PRODUCTION
        python manage.py test
      env:
        DEVELOPMENT: True 
  upload-release:
    needs: run-tests
    runs-on: ubuntu-latest
    env:
      HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
    steps:
      - name: Download code
        uses: actions/checkout@v2
      - name: Login to Heroku Container Registery
        run: heroku container:login
      - name: Build and push
        run: heroku container:push -a ${{ secrets.HEROKU_API_KEY }} web
      - name: Release
        run: heroku container:release -a ${{ secrets.HEROKU_APP_KEY }} web
